import http.server
import socketserver
import json
import urllib.parse
import hashlib
import base64
import os
import hmac
import re
import time
from threading import Timer

# Simuler une base de données en mémoire
users = {}
articles = []
login_attempts = {}
pending_articles = {}

# Fonction pour générer un hash sécurisé du mot de passe
def hash_password(password, salt=None):
    if not salt:
        salt = base64.b64encode(os.urandom(16)).decode('utf-8')
    pwd_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt.encode('utf-8'), 100000)
    pwd_hash = base64.b64encode(pwd_hash).decode('utf-8')
    return f"{salt}${pwd_hash}"

# Fonction pour vérifier un mot de passe
def verify_password(stored_password, provided_password):
    salt, pwd_hash = stored_password.split('$')
    return hmac.compare_digest(stored_password, hash_password(provided_password, salt))

# Fonction pour générer un token de session simple
def generate_token():
    return base64.b64encode(os.urandom(24)).decode('utf-8')

# Fonction pour valider une adresse email
def is_valid_email(email):
    return re.match(r"[^@]+@[^@]+\.[^@]+", email)

# Fonction pour valider la date de naissance
def is_valid_birth_date(birth_date):
    try:
        time.strptime(birth_date, '%Y-%m-%d')
        return True
    except ValueError:
        return False

# Fonction pour vérifier la force du mot de passe
def is_strong_password(password):
    if len(password) < 8:
        return False
    if not re.search(r"[A-Z]", password):
        return False
    if not re.search(r"[a-z]", password):
        return False
    if not re.search(r"[0-9]", password):
        return False
    if not re.search(r"[!@#\$%\^&\*]", password):
        return False
    return True

# Limitation des tentatives de connexion
def check_login_attempts(email):
    attempts = login_attempts.get(email, {"count": 0, "time": time.time()})
    if time.time() - attempts["time"] > 300:  # Reset after 5 minutes
        attempts = {"count": 0, "time": time.time()}
    attempts["count"] += 1
    login_attempts[email] = attempts
    return attempts["count"] <= 5

# Protection CSRF
def generate_csrf_token():
    return base64.b64encode(os.urandom(24)).decode('utf-8')

# Fonction de traitement du paiement
def process_payment(article):
    email = article['user']
    user = users[email]
    word_count = len(article['content'].split())
    payment_amount = word_count * 1000000

    # Déduction des crédits de l'utilisateur
    user['credits'] += payment_amount
    print(f"Payment of {payment_amount} euros processed for {email}.")

    # Ajout à la liste des articles définitifs
    articles.append(article)
    pending_articles.pop(email, None)

class Handler(http.server.SimpleHTTPRequestHandler):
    sessions = {}
    csrf_tokens = {}

    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(bytes(self.html(), "utf8"))

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        data = urllib.parse.parse_qs(post_data.decode('utf-8'))

        if self.path == '/register':
            email = data['email'][0]
            password = data['password'][0]
            first_name = data['first_name'][0]
            last_name = data['last_name'][0]
            bank_name = data['bank_name'][0]
            birth_date = data['birth_date'][0]

            if email in users:
                self._send_response(400, {"message": "User already exists"})
                return

            if not is_valid_email(email):
                self._send_response(400, {"message": "Invalid email address"})
                return

            if not is_valid_birth_date(birth_date):
                self._send_response(400, {"message": "Invalid birth date"})
                return

            if not is_strong_password(password):
                self._send_response(400, {"message": "Password is not strong enough"})
                return

            hashed_password = hash_password(password)
            users[email] = {
                'password': hashed_password,
                'first_name': first_name,
                'last_name': last_name,
                'bank_name': bank_name,
                'birth_date': birth_date,
                'credits': 0.0
            }
            self._send_response(201, {"message": "User registered successfully"})

        elif self.path == '/login':
            email = data['email'][0]
            password = data['password'][0]

            if not check_login_attempts(email):
                self._send_response(403, {"message": "Too many login attempts. Try again later."})
                return

            user = users.get(email)
            if not user or not verify_password(user['password'], password):
                self._send_response(401, {"message": "Invalid credentials"})
                return

            token = generate_token()
            self.sessions[token] = email
            csrf_token = generate_csrf_token()
            self.csrf_tokens[token] = csrf_token
            self._send_response(200, {"message": "Login successful", "token": token, "csrf_token": csrf_token})

        elif self.path == '/submit_article':
            token = data['token'][0]
            csrf_token = data['csrf_token'][0]
            content = data['content'][0]

            if self.csrf_tokens.get(token) != csrf_token:
                self._send_response(403, {"message": "Invalid CSRF token"})
                return

            email = self.sessions.get(token)
            if not email:
                self._send_response(401, {"message": "Invalid token"})
                return

            if len(content) > 10000:
                self._send_response(400, {"message": "Article content is too long"})
                return

            # Stockage temporaire de l'article
            article = {
                'user': email,
                'content': content,
                'word_count': len(content.split())
            }
            pending_articles[email] = article

            # Délai de 2 minutes avant de traiter l'article
            Timer(120, process_payment, [article]).start()

            self._send_response(201, {"message": "Article submitted and will be processed shortly"})

        elif self.path == '/transfer':
            token = data['token'][0]
            csrf_token = data['csrf_token'][0]
            recipient_name = data['recipient_name'][0]
            bank_name = data['bank_name'][0]
            amount = float(data['amount'][0])

            if self.csrf_tokens.get(token) != csrf_token:
                self._send_response(403, {"message": "Invalid CSRF token"})
                return

            email = self.sessions.get(token)
            if not email:
                self._send_response(401, {"message": "Invalid token"})
                return

            sender = users.get(email)
            recipient = next((u for u in users.values() if f"{u['first_name']} {u['last_name']}" == recipient_name and u['bank_name'] == bank_name), None)

            if not recipient:
                self._send_response(404, {"message": "Recipient not found"})
                return

            if sender['credits'] < amount:
                self._send_response(400, {"message": "Insufficient funds"})
                return

            sender['credits'] -= amount
            recipient['credits'] += amount
            self._send_response(200, {"message": "Transfer successful"})

    def _send_response(self, code, message):
        self.send_response(code)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        self.wfile.write(bytes(json.dumps(message), "utf8"))

    def html(self):
        return '''
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Article Submission</title>
        </head>
        <body>
            <h1>Submit an Article</h1>
            <form id="register-form">
                <h2>Register</h2>
                <input type="text" id="reg-first-name" placeholder="First Name" required>
                <input type="text" id="reg-last-name" placeholder="Last Name" required>
                <input type="text" id="reg-bank-name" placeholder="Bank Name" required>
                <input type="email" id="reg-email" placeholder="Email" required>
                <input type="password" id="reg-password" placeholder="Password" required>
                <input type="date" id="reg-birth-date" placeholder="Birth Date" required>
                <button type="submit">Register</button>
            </form>
            <form id="login-form">
                <h2>Login</h2>
                <input type="email" id="login-email" placeholder="Email" required>
                <input type="password" id="login-password" placeholder="Password" required>
                <button type="submit">Login</button>
            </form>
            <form id="article-form">
                <h2>Submit Article</h2>
                <textarea id="article-content" placeholder="Write your article here..." required></textarea>
                <button type="submit">Submit</button>
            </form>
            <form id="transfer-form">
                <h2>Transfer Money</h2>
                <input type="text" id="trans-recipient-name" placeholder="Recipient Name" required>
                <input type="text" id="trans-bank-name" placeholder="Recipient Bank Name" required>
                <input type="number" id="trans-amount" placeholder="Amount" required>
                <button type="submit">Transfer</button>
            </form>
            <script>
                document.getElementById('register-form').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const firstName = document.getElementById('reg-first-name').value;
                    const lastName = document.getElementById('reg-last-name').value;
                    const bankName = document.getElementById('reg-bank-name').value;
                    const email = document.getElementById('reg-email').value;
                    const password = document.getElementById('reg-password').value;
                    const birthDate = document.getElementById('reg-birth-date').value;
                    const response = await fetch('/register', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({ first_name: firstName, last_name: lastName, bank_name: bankName, email, password, birth_date: birthDate })
                    });
                    const data = await response.json();
                    alert(data.message);
                });

                document.getElementById('login-form').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const email = document.getElementById('login-email').value;
                    const password = document.getElementById('login-password').value;
                    const response = await fetch('/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({ email, password })
                    });
                    const data = await response.json();
                    alert(data.message);
                    if (data.token) {
                        localStorage.setItem('token', data.token);
                        localStorage.setItem('csrf_token', data.csrf_token);
                    }
                });

                document.getElementById('article-form').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const content = document.getElementById('article-content').value;
                    const token = localStorage.getItem('token');
                    const csrf_token = localStorage.getItem('csrf_token');
                    const response = await fetch('/submit_article', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({ token, csrf_token, content })
                    });
                    const data = await response.json();
                    alert(data.message);
                });

                document.getElementById('transfer-form').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    const recipientName = document.getElementById('trans-recipient-name').value;
                    const bankName = document.getElementById('trans-bank-name').value;
                    const amount = document.getElementById('trans-amount').value;
                    const token = localStorage.getItem('token');
                    const csrf_token = localStorage.getItem('csrf_token');
                    const response = await fetch('/transfer', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: new URLSearchParams({ token, csrf_token, recipient_name: recipientName, bank_name: bankName, amount })
                    });
                    const data = await response.json();
                    alert(data.message);
                });
            </script>
        </body>
        </html>
        '''

PORT = 8000
Handler = Handler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()
